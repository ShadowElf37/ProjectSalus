v0.5.2 (6/16/19)
- Fixed bug with persistent.py objects not writing
- Moved all that messy builtin compat to a new carefully_serialized decorator in serializer.py

v0.5.1 (6/16/19)
- Fixed a bug with weekday solving
- Made darkbb.css more scalable
+ Added #define to render()
+ Added PersistentList
- Reformed PersistentDict and PersistentList to inherit dict and list respectively
- Reformed deserializer class production to work with inheritance of builtins

v0.5.0 (6/15/19)
- Configs are now added to CONFIG_CACHE automatically, so the Reload Config button works
- Added some nice htmlutil functions
- Added snippets.json to contain configurable format strings, mostly of HTML
- Built landing page prototype in bb_test.html (no js)
	+ Added schedule
	+ Added announcements
	+ Added Ma'amad info
	+ Added snack poll template
	+ Added Sage menu
	+ Added class info for next period
	+ Added assignments for week
	+ Added links to various external resources
- Moved landing page CSS to darkbb.css
- Temporarily scraping menu from simplemenu.json while the Sage website is on vacation
- Response will now properly encode data to be html-safe
- Added MaamadWeek to info.py
- Fixed some bugs

=== MAJOR ===

v0.4.10 (6/12/19)
- Fixed some bugs, including a fatal one in class info scrape
- Beginning to rewrite bb_test.html to be the true user landing page for the site
- asyncpost.js no longer sends multiple xhr requests on timeout

v0.4.9 (6/12/19)
- Renamed proprietary.py to data.py and added most of the stuff we'll need for the future
- Added ellipsis serializer because why not
- IMAP Inboxes are now serialized
- Lots of data structures floating around are now stored in accounts

v0.4.8 (6/11/19)
- Added datetime serializer
- Sports are now scraped with directory etc.
- Added proprietary.py to hold and serialize various objects for Clubs, Events, etc.

v0.4.7 (6/10/19)
- Added sports game scraper
- Added scraper for BB calendar filters (returns multiple groups of filter strings that can be sent in specific requests for calendar lists)
- BB cookies are now stored by default in scraper instead of manually on each login call

v0.4.6 (6/10/19)
- Inbox is threaded
- Inbox can now fetch up to a certain limit of messages
- Inbox has a UID system and can update/clean itself of new/stale messages

v0.4.5 (6/9/19)
- Main page after BB login now scrapes class info and class topics
- Added Minisafe and on_completion to Poolsafe for increased control on execution data
- Fixed schedule_span()

v0.4.4 (6/8/19)
- Rewrote Blackbaud-related RequestHandlers to cleanly spawn updaters
- register_bb_updater() is deprecated
- Bug fixes and workarounds to help this transition

v0.4.3 (6/8/19)
- Improved error catching in a number of places
- Soft-Serialized scrape data for faster startups and clean profile caching
- Scrape data is now properly updated by the Chronos

v0.4.2 (6/7/19)
- Added date-span schedule scrape
- Added class details scrape
- Minor improvements

v0.4.1 (6/6/19)
- Lots of important bug fixes
- Lots of quality of life improvements
- Made better login-error catching for BB scrapers
- Handled most login-related loopholes and issues
- Added Response.back()

v0.4.0 (5/29/19)
- Caught rendering exceptions
- Solved issue with directory detail scraping
- Revamped bb_test.html and its handler to have a spicy new interface
- Added a couple things to htmlutil.py
- Added topic downloads scraper
- Fixed serializer-to-server synchronization issues


=== MAJOR ===


v0.3.9 (5/29/19)
- Finished and implemented the Chronos
- Fixed some serializer bugs

v0.3.8 (5/28/19)
- Enabled blind SMS-ing utilizing Bcc instead of defaulting to forming a messaging group
- Created chronos.py to replace timedworker.py using sched, a nice built-in scheduler we overlooked somehow
- Bug fixes

v0.3.7 (5/27/19)
- Overhauled serializer to be more modular
- Added function serialization
- Overhauled mail.py to be modular
- Finished a more robust IMAP in mail.py

v0.3.6 (5/26/19)
- Added rudimentary IMAP functionality
- Cleaned up mail.py
- Reworked updaters to be less resource intensive
- Improved scrapers

v0.3.5 (5/24/19)
- Cleaned up _todo
- Added .env and reader to store passwords and stuff
- Teacher directory scraping
- Formatting improvements

v0.3.4 (5/24/19)
- Updated the encryption system to be cleaner and use the cryptography package
- Added bytes to serializer
- Fixed a smattering of small issues

v0.3.3 (5/24/19)
- Added data backup system
- Added more detailed directory view (user-specific and separate from main directory request, unfortunately)

v0.3.2 (5/21/19)
- Created MMS (basically SMS) functionality using Outlook as a gateway
- Made directory scraping a tad more flexible

v0.3.1 (5/20/19)
- Rough server-side encryption of BB login info
- Added crypt.py (replace with pycrypto later)

v0.3.0 (5/20/19)
- Fixed many many scraping bugs
- Added updates.py to handle global scraping and updates for the project
- Added timedworker.py with Updater and UpdateManager to handle recurring events
- Added Poolsafe so main thread can interact with Pools
- Scraped data is now stored in Account *unencrypted*
- Set up HTML tech demo for the scraping - it works!


=== MAJOR ===


v0.2.5 (5/18/19)
- Cleaned up classic scrape parsing for every sector
- Added classic scrape tech demo

v0.2.4 (5/18/19)
- Dug around until it was possible to collect all the urls needed for a classical scrape in classic_scrape.py
- Created scraping methods for Blackbaud login, schedule, assignments, grades, assignment downloads, and Sage menu; still have to parse the data

v0.2.3 (5/17/19)
- Element class added to Selenium
- Many QOL improvements to Selenium - it's now pretty much entirely self-supporting
- Added TimingCache and Updater to cache.py (currently broken), might use to help thread Selenium

v0.2.2 (5/16/19)
- Edits to main.py to check external libraries and mkdir config/, logs/, data/, and web/assets/ if any are missing
- Added class Tab to scrape.py for a more unified tab-management experience

v0.2.1 (5/16/19)
- Half a robust Selenium system complete (still needs Tab objects to be truly versatile)
- Accounts are now R/W locked with a neat little inheritance that overrides get and set to avoid race conditions

v0.2.0 (5/15/19)
- Fixed the serializer for real this time; accounts are now stored
- Updated _todo with new backend plans regarding scraping and backups
- Added scrape.py and some simple BS4/requests functions
- Deleted old serializers that were broken


=== MAJOR ===


v0.1.17 (5/12/19)
- Added shutdown function to server
- Finished improving error handling; it can now run safely
- Added /logfile to view the current log - modified Tees to write to a StringIO buffer that the server can read from in get_log()

v0.1.16 (5/12/19)
- Added asyncpost.js for control words, along with the functions to handle them all
- Working on new serializer that's "cleaner" and "more robust" according to Alex (it's broken af)

v0.1.15 (5/11/19)
- Through a wrecking ball through all of the code everywhere and made a new serializer - @Serialized('file')

v0.1.14 (5/10/19)
- Improved error communication with the client
- Small improvements to mime guessing
- Made rendering cleaner and more efficient (although BinDict should be made better at some point... this is not great)

v0.1.13 (5/10/19)
- Added admin/controlboard.html
- Added GET addresses for update etc. while we wait on @Alwinfy; tested, is working
- Finished navbar

v0.1.12 (5/9/19)
- Get queries are now parsed from ? onward
- Responses now queue to send to avoid cookie race conditions
- Set navbar for ranks 0 and 1
- Added a bunch of html skeleton for future features

v0.1.11 (5/8/19)
- Escaped post request and replaced parser with an imported function

v0.1.10 (5/8/19)
- Fixed bug preventing login
- Made navbar more scalable

v0.1.9 (5/8/19)
- Added ShellAccount for guests so we don't have explosions everywhere
- Edited login CSS
- Added ranks 0 and 1 navbars with login (navbars themselves are incomplete)
- Switched to a new function wrapper for mime guessing to avoid errors
- Added three current pages to handler dict, set proper handlers for them

v0.1.8 (5/7/19)
- Created login page
- Created signup page
- Created login and signup CSS (a tad janky)

v0.1.7 (5/7/19)
- Added pre_call() to handle rank-specific rendering and any other things we may need some day
- Added js-less control buttons as rendered [[reboot_controls]]
- Ranked whitelist.json (still not used)
- Fixed rendering bug

v0.1.6 (5/7/19)
- Added Python rendering (use {{x}} to eval x) for attach_file()
- Redesigned rendering system to use regex
- Created htmlutil.py to house functions for more easily generating CSS links, etc.

v0.1.5 (5/7/19)
- Important bug fixes
- QOL tweaks, including a couple easy function responses in response, a post_call() called, and removal of obsolete code

v0.1.4 (5/6/19)
- Added global config cache
- Server can now reload config and filecache internally

v0.1.3 (5/6/19)
- Lots of good work on home and general.css
- Fixed up navbar.json and added to handler

v0.1.2 (5/4/19)
- Added general.css
- Made lots of important CSS (navbar, bottombar, main container)
- Minor bug fixes and tweaks

v0.1.1 (5/2/19)
- Switched locations.json to use mimetypes and did some funny tinkering to get it to work with the cache and server

v0.1.0 (5/2/19)
- Threw all the server code into server/ to remind us not to touch it unless we have to - it's also portable!
- Fixed imports
- Minor edits all around
- Fixed a major issue where path wasn't set on cookies, causing cookie access to fail spectacularly on alternate-dir reqs


=== MAJOR ===


v0.0.21 (5/1/19)
- Added file searching for assets/ based on locations.json in FileCache.read() - right now it uses ext, consider switching to MIME type

v0.0.20 (5/1/19)
- Added recursive file searching
- Added more flexible pathing to the cache
- Added quality docstring to attach_file()

v0.0.19 (5/1/19)
- Cleaned up some things
- Added a couple things to fix and support the now-working login system

v0.0.18 (4/25/19)
- Added find_item() and items() to PersistentDict
- Added login() to client - haven't implemented login page yet to test
- Abolished obsolete log.py

v0.0.17 (4/18/19)
- Abolished obsolete code
- Minor fixes

v0.0.16 (4/18/19)
- Added client-side file caching
- Cleaned up lots of bad errors
- Fixed some headers
- Switched responses to HTTP/1.1

v0.0.15 (4/17/19)
- Fixed rebooting issue by adding thread cleanup
- Converted config file formats to json after some infighting
- Added easy Config class and "persistent" objects for handling pickled dictionaries
- Cleaned up some code

v0.0.14 (4/16/19)
- Fixed pickling issue in client.py
- Made files load in binary by default and then decode so that you don't have to specify manually for unreadable files
- Moved all client work to RequestHandler so that response.py is pure and abstract and easy to use in another project

v0.0.13 (4/15/19)
- Moved user-token cookie to RequestHandler in handlers.py
- Cleaned up some code, courtesy Alwinfy
- Added default file type requirements for render

v0.0.12 (4/15/19)
- Added whitelist.cfg
- Added accounts.dat
- Added Account class in client.py
- Added proper nonces to ClientObj after much debugging and work - clients can now log in nice and good
- Added a test login and login-protected page

v0.0.11 (4/15/19)
- Added cross-platform pathing in main.py so we don't have to worry about Windows being retarded

v0.0.10 (4/15/19)
- Bad cookie retrieval attempts will no longer crash
- Fixed tee.py
- Added a server-side cache to increase performance

v0.0.9 (4/15/19)
- Modified Overlord to manage a global buffer for performance
- Added tee.py (broken atm) for logging
- Threw Server.run() into a while loop so it doesn't quit after an exception
- Minor fixes

v0.0.8 (4/14/19)
- Can finally reboot
- Renamed all the Mercury code to mercury_fname.py
- Renamed all the modern files to their proper things
- Added server rebooting; _main.py is now run remotely from main.py so it can manage that

v0.0.7 (4/14/19)
- Removed HEAD code because it's dumb
- Allowed messages to be set for response codes
- Added httpserver_main.py to replace main.py soon; it really doesn't need to hold much, thankfully

v0.0.6 (4/14/19)
- Cleaner Overlord function pushing (now push() and pushf())
- Removed codes.cfg now that we have a real server
- Added support for POST requests
- Added easy response.redirect() function
- Updated TODO_
- Added a try-except into the server so errors won't crash the whole server
- Threw GET code into HEAD but added a Response.head variable to limit it to a header

v0.0.5 (4/14/19)
- High quality cookie support
- Support for custom functions being pushed to the Overlord in an emergency

v0.0.4 (4/14/19)
- Fixed the thread Overlord not running its threads
- Overrode some stuff to get the thread Overlord to handle requests properly

v0.0.3 (4/13/19)
- Work in progress server overhaul to use http.server in requisitioned_httpserver.py
- Added proc_manager.py to try and do server reboots; will replace with something neater later
- Added thread Overlord and Maestro in threadpool.py

v0.0.2 (4/7/19)
- Hid passwords in a git-ignored file
- Added passwords.py to get passwords from secret file
- Added fileify.js, courtesty of Alwinfy

v0.0.1 (4/7/19)
- Stole response code from Mercury
- Stole log.py from Mercury
- Added cache.cfg, errors.cfg, ext.cfg, codes.cfg, navbar.cfg from Mercury
- Added much of the folder structure from Mercury
- Added index.html in web/home/
- Added client.py to have a neat little client class
- Cleaned up response.py and server.py to remove Mercury-specific functions
- Removed brute force protections (it was kinda stupid)
- Created TODO_ list

v0.0.0 (4/6/19)
- Added changelog
- Added handlers.py, main.py, server.py, response.py, mail.py
- Copied some smtp code from SO into mail.py and set it with Emery mail account
